name: sonarqube

on:
  workflow_dispatch:
  push:

jobs:
  trigger:
    name: Build and analyze
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Trigger another workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: sonorqube.yml
          token: ${{ secrets.GH_TOKEN }}
          repo: The-A-Team-organization/illuminati_email_service
          ref: main
      - name: Wait 1m
        uses: GuillaumeFalourd/wait-sleep-action@v1
        with:
          time: "1m"

  build:
    #needs: trigger
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run go mod init
        run: |
          go mod init illuminati/go/microservice 
          go get github.com/robfig/cron/v3 
          go get github.com/wneessen/go-mail 
          go get github.com/XANi/loremipsum 
          go get golang.org/x/crypto/bcrypt
          go get golang.org/x/tools/cmd/cover
          go get github.com/jarcoal/httpmock;
          go mod tidy
          go test -coverprofile=coverage.out ./**/

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        continue-on-error: false
        with:
          args: >-
            -Dsonar.projectKey=illuminati_service_go
            -Dsonar.sources=.
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.exclusions=./**/vendor/**,./**/testdata/*,jenkinsfile,.cspell.json
            -Dsonar.coverage.exclusions=./**/*_test.go
            -Dsonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
